buildscript {
    ext {
        junitVersion = '4.12'
        testngVersion = '6.14.3'
        grootVersion = '1.3.1'
        allureTestngAdaptorVersion ='1.5.4'
        lombokVersion ='1.18.12'
    }
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'com.jfrog.artifactory' version '4.7.1'
    id "io.qameta.allure" version "2.5"
}

apply from: "$rootDir/gradle/helpers/common-methods.gradle"

Properties semver = new Properties()
semver.load(new FileInputStream(file("semver.properties")))
Properties props = new Properties()
if (file("groot.properties").exists()) {
    file("groot.properties").withInputStream { props.load(it) }
} else {
    println("groot.properties file does not exist ")
}

def buildTimeMillis = System.currentTimeMillis()
def buildVersion = computeVersionName(semver['major'], semver['minor'], semver['patch'])
def buildTime = computeBuildTimeFormatted(buildTimeMillis)
def buildRevision = computeRevision()

group 'project.group'

ant.propertyfile(file: "version.properties") {
    entry(key: "version", value: version)
    entry(key: "buildVersion", value: buildVersion)
    entry(key: "rev", value: buildRevision)
    entry(key: "buildTime", value: buildTime)
}

allprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.8
    version = rootProject.version
    repositories {
        mavenLocal()
        maven {
            url "${artifactory_contextUrl}/repo"
        }
        mavenCentral()
    }
}

tasks.withType(Test) {
    maxParallelForks = Integer.parseInt(props.getProperty("maxParallelForks", "1"))
    println("The number of concurrent tests is currently set to : " + maxParallelForks)
    useTestNG() {}
    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        showCauses true
        showStackTraces true
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

dependencies {
    testCompile "junit:junit:${junitVersion}"
    compile "org.testng:testng:${testngVersion}"
    compile "com.globalkinetic:groot:${grootVersion}"
    testCompile "ru.yandex.qatools.allure:allure-testng-adaptor:${allureTestngAdaptorVersion}"
    testCompile "org.projectlombok:lombok:${lombokVersion}"
}